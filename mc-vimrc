set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'airblade/vim-gitgutter'
Plugin 'bogado/file-line'
Plugin 'c-brenn/phoenix.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'elixir-editors/vim-elixir'
Plugin 'iamcco/markdown-preview.vim'
Plugin 'jiangmiao/auto-pairs'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'kana/vim-textobj-user'
Plugin 'Lokaltog/vim-powerline'
Plugin 'luochen1990/rainbow'
Plugin 'neoclide/coc.nvim', {'branch': 'release'}
Plugin 'neomake/neomake'
Plugin 'ntpeters/vim-better-whitespace'
Plugin 'rhysd/vim-textobj-ruby'
Plugin 'scrooloose/nerdtree'
Plugin 'sheerun/vim-polyglot'
Plugin 'slashmili/alchemist.vim'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tomtom/tcomment_vim'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-bundler'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-projectionist'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/grep.vim'
Plugin 'vim-syntastic/syntastic'
Plugin 'thalesmello/lkml.vim'
Plugin 'elixir-lsp/coc-elixir', {'do': 'yarn install && yarn prepack'}
Plugin 'neoclide/coc-eslint', {'do': 'yarn install && yarn prepack'}
Plugin 'neoclide/coc-tsserver', {'do': 'yarn install && yarn prepack'}
Plugin 'ngmy/vim-rubocop'
Plugin 'morhetz/gruvbox'

" All of your Plugins must be added before the following line
" Initialize plugin system
call vundle#end()

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
      \ | wincmd p | diffthis
endif

" Vim set definitions
source ~/.vim/config/setters

" Vim let definitions
source ~/.vim/config/letters

" Vim mappings
source ~/.vim/config/mappings

" Use new regular expression engine
set re=0

call textobj#user#plugin('line', {
\   '-': {
\     'select-a-function': 'CurrentLineA',
\     'select-a': 'al',
\     'select-i-function': 'CurrentLineI',
\     'select-i': 'il',
\   },
\ })

function! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunction

" FZF functionality
command! -bang -nargs=* Find
  \ call fzf#vim#grep(
  \   'rg --column --line-number --hidden --ignore-case --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
  \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%:hidden', '?'),
  \   <bang>0)

if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
  autocmd! BufWritePost * Neomake

  " Don't screw up folds when inserting text that might affect them, until
  " leaving insert mode. Foldmethod is local to the window.
  autocmd InsertEnter * let w:last_fdm=&foldmethod | setlocal foldmethod=manual
  autocmd InsertLeave * let &l:foldmethod=w:last_fdm

  " Highlight end-of-line whitespaces
  autocmd InsertEnter * syn clear EOLWS | syn match EOLWS excludenl /\s\+\%#\@!$/
  autocmd InsertLeave * syn clear EOLWS | syn match EOLWS excludenl /\s\+$/
  highlight EOLWS ctermbg=red guibg=red

  " Highlight double spaces
  autocmd InsertEnter * syn clear DOS | syn match DOS excludenl /\s{2}$/
  autocmd InsertLeave * syn clear DOS | syn match DOS excludenl /\s\+$/
  highlight DOS ctermbg=red guibg=red

  " Clear matching buffer for better performance
  autocmd BufWinLeave * call clearmatches()

  autocmd BufNewFile,BufRead *.ejs set filetype=html
  autocmd FileType python set tabstop=4 shiftwidth=4 textwidth=140 softtabstop=4
  autocmd FileType proto setlocal shiftwidth=2 softtabstop=2 expandtab

  augroup Mkdir
    autocmd BufWritePre *
      \ if !isdirectory(expand("<afile>:p:h")) |
          \ call mkdir(expand("<afile>:p:h"), "p") |
      \ endif
  augroup END
endif

let g:coc_disable_startup_warning = 1

set backupdir=~/vimtmp//,.
set directory=~/vimtmp//,.

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

source ~/.vim/config/coc

colorscheme gruvbox
